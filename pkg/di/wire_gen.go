// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/Crud-application/db"
	"github.com/Crud-application/pkg/api/handlers"
	"github.com/Crud-application/pkg/application/services"
	user2 "github.com/Crud-application/pkg/application/user"
	"github.com/Crud-application/pkg/domain/persistence"
	"github.com/Crud-application/pkg/infrastructure/persistence/user"
	"github.com/google/uuid"
	"github.com/google/wire"
	"go.mongodb.org/mongo-driver/mongo"
)

// Injectors from wire.go:

func provideUserRepository() *user.MongoUserRepository {
	client := provideMongoDBclient()
	mongoUserRepository := user.NewMongoUserRepository(client)
	return mongoUserRepository
}

func provideUserService() *user2.UserService {
	mongoUserRepository := provideUserRepository()
	uuidGenerator := provideUUIDGenerator()
	userService := user2.NewUserService(mongoUserRepository, uuidGenerator)
	return userService
}

func provideUserHandler() *handlers.UserHandler {
	userService := provideUserService()
	userHandler := handlers.NewUserHandler(userService)
	return userHandler
}

func InjectHandler() *handlers.Handlers {
	userHandler := provideUserHandler()
	handlersHandlers := handlers.NewHandlers(userHandler)
	return handlersHandlers
}

// wire.go:

func provideMongoDBclient() *mongo.Client {
	client, _, _ := db.GetMongoDB()
	return client
}

var userRepoSet = wire.NewSet(
	provideUserRepository, wire.Bind(new(persistence.IUserRepository), new(*user.MongoUserRepository)),
)

func provideUUIDGenerator() user2.UUIDGenerator {
	return func() string {
		return uuid.New().String()
	}
}

var userSvcSet = wire.NewSet(
	provideUserService, wire.Bind(new(services.IUserService), new(*user2.UserService)), provideUUIDGenerator,
)
